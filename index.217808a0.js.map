{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,G,E,I,A,W,M,A,U,wI,G,CCcA,IAAK,IAZC,EAAU,CAAC,EAAE,CAAE,EAAE,CAAE,EAAE,CAAE,EAAE,CAAC,CAC1B,EAAQ,EAAG,SAAS,gBAAgB,CAAC,eACrC,EAAQ,SAAS,gBAAgB,CAAC,eAClC,EAAa,EAAK,GAAG,CAAC,SAAC,CAA7B,EAAsC,OAAA,EAAG,EAAI,gBAAgB,CAAC,e,GACxD,EAAkB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAE,CAEhD,EAAc,SAAS,aAAa,CAAC,UACrC,EAAe,SAAS,aAAa,CAAC,kBACtC,EAAc,SAAS,aAAa,CAAC,iBACrC,EAAa,SAAS,aAAa,CAAC,gBACpC,EAAY,SAAS,aAAa,CAAC,eAEhC,EAAI,EAAG,EAAI,EAAG,IACrB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACrB,CAAO,CAAC,EAAE,CAAC,IAAI,CAAC,CAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAE,EAdvC,IAkBI,EAAc,EAAG,GACjB,EAAU,CAAA,EACV,EAAU,CAAA,EAEd,SAAS,IACP,GAAK,EAAW,MAAM,EAItB,IAAM,EAAc,SAAC,CAArB,EAAiC,OAAA,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,EAAQ,MAAM,C,EACpE,EAAa,CAAU,CAAC,EAAY,GAAY,CAChD,EAAc,CAAe,CAAC,EAAY,GAAiB,AAEjE,CAAA,EAAW,SAAS,CAAI,0BAAsC,MAAA,CAAZ,GAClD,EAAW,SAAS,CAAG,EAEvB,EAAW,MAAM,CAAC,EAAW,OAAO,CAAC,G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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar columns = [\n    [],\n    [],\n    [],\n    []\n];\nvar rows = _to_consumable_array(document.querySelectorAll(\".field-row\"));\nvar cells = document.querySelectorAll(\".field-cell\");\nvar cellsInRow = rows.map(function(row) {\n    return _to_consumable_array(row.querySelectorAll(\".field-cell\"));\n});\nvar startCellVelues = [\n    2,\n    2,\n    2,\n    2,\n    2,\n    2,\n    2,\n    2,\n    2,\n    4\n];\nvar startButton = document.querySelector(\".start\");\nvar startMessage = document.querySelector(\".message-start\");\nvar loseMessage = document.querySelector(\".message-lose\");\nvar winMessage = document.querySelector(\".message-win\");\nvar gameScore = document.querySelector(\".game-score\");\nfor(var i = 0; i < 4; i++)for(var j = 0; j < 4; j++)columns[j].push(rows[i].children[j]);\nvar clearCells = _to_consumable_array(cells);\nvar started = false;\nvar rotated = false;\nfunction randomCellFill() {\n    if (!clearCells.length) return;\n    var randomIndex = function(someArr) {\n        return Math.floor(Math.random() * someArr.length);\n    };\n    var randomCell = clearCells[randomIndex(clearCells)];\n    var randomValue = startCellVelues[randomIndex(startCellVelues)];\n    randomCell.classList = \"field-cell field-cell--\".concat(randomValue);\n    randomCell.innerText = randomValue;\n    clearCells.splice(clearCells.indexOf(randomCell), 1);\n}\nvar start = function() {\n    startMessage.style = \"display: none;\";\n    startButton.classList = \"button restart\";\n    startButton.innerText = \"Restart\";\n    randomCellFill();\n    randomCellFill();\n    started = true;\n};\nvar restart = function() {\n    loseMessage.classList.add(\"hidden\");\n    winMessage.classList.add(\"hidden\");\n    clearCells = _to_consumable_array(cells);\n    gameScore.innerText = 0;\n    cells.forEach(function(cell) {\n        cell.innerText = \"\";\n        cell.className = \"field-cell\";\n    });\n    randomCellFill();\n    randomCellFill();\n};\nfunction isMergePossible() {\n    var wholeField = _to_consumable_array(cellsInRow).concat(_to_consumable_array(columns));\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = wholeField[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var line = _step.value;\n            for(var i = 0; i < 3; i++){\n                if (line[i].innerText === line[i + 1].innerText) return true;\n            }\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n}\nfunction upArrow() {\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = columns[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var column = _step.value;\n            rotateCells(_to_consumable_array(column).reverse());\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n}\nfunction downArrow() {\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = columns[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var column = _step.value;\n            rotateCells(column);\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n}\nfunction rightArrow() {\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = cellsInRow[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var row = _step.value;\n            rotateCells(row);\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n}\nfunction leftArrow() {\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = cellsInRow[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var row = _step.value;\n            rotateCells(_to_consumable_array(row).reverse());\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n}\nfunction arrowMove(direction) {\n    if (!clearCells.length && !isMergePossible()) loseMessage.classList.remove(\"hidden\");\n    switch(direction){\n        case \"ArrowUp\":\n            upArrow();\n            break;\n        case \"ArrowDown\":\n            downArrow();\n            break;\n        case \"ArrowRight\":\n            rightArrow();\n            break;\n        case \"ArrowLeft\":\n            leftArrow();\n            break;\n    }\n    cells.forEach(function(cell) {\n        cell.removeAttribute(\"data-blocked\");\n    });\n}\nfunction deleteElement(element) {\n    element.innerText = \"\";\n    element.className = \"field-cell\";\n    clearCells.push(element);\n}\nfunction rotateElement(curr, prev) {\n    curr.innerText = prev.innerText;\n    curr.className = prev.className;\n    clearCells.splice(clearCells.indexOf(curr), 1);\n    deleteElement(prev);\n}\nfunction cellMerge(curr, prev) {\n    var value = curr.innerText * 2;\n    curr.innerText = value;\n    curr.className = \"field-cell field-cell--\".concat(value);\n    gameScore.innerText = +gameScore.innerText + value;\n    deleteElement(prev);\n    curr.dataset.blocked = true;\n    prev.dataset.blocked = true;\n    if (value === 2048) winMessage.classList.remove(\"hidden\");\n}\nfunction rotateCells(line) {\n    for(var i = 3; i > 0; i--){\n        var moveAllowed = clearCells.includes(line[i]) && !clearCells.includes(line[i - 1]);\n        var mergeAllowed = line[i].innerText === line[i - 1].innerText && line[i].innerText.length && !line[i - 1].dataset.blocked;\n        if ((mergeAllowed || moveAllowed) && !rotated) rotated = true;\n        if (mergeAllowed) {\n            cellMerge(line[i], line[i - 1]);\n            rotateCells(line);\n        }\n        if (moveAllowed) {\n            rotateElement(line[i], line[i - 1]);\n            rotateCells(line);\n        }\n    }\n}\ndocument.addEventListener(\"keydown\", function(evt) {\n    var arrowDirections = [\n        \"ArrowUp\",\n        \"ArrowDown\",\n        \"ArrowLeft\",\n        \"ArrowRight\"\n    ];\n    if (arrowDirections.includes(evt.key)) {\n        evt.preventDefault();\n        arrowMove(evt.key);\n        if (rotated) {\n            randomCellFill();\n            rotated = false;\n        }\n    }\n});\nstartButton.addEventListener(\"click\", function() {\n    if (!started) start();\n    else restart();\n});\n\n//# sourceMappingURL=index.217808a0.js.map\n","'use strict';\n\nconst columns = [[], [], [], []];\nconst rows = [...document.querySelectorAll('.field-row')];\nconst cells = document.querySelectorAll('.field-cell');\nconst cellsInRow = rows.map((row) => [...row.querySelectorAll('.field-cell')]);\nconst startCellVelues = [2, 2, 2, 2, 2, 2, 2, 2, 2, 4];\n\nconst startButton = document.querySelector('.start');\nconst startMessage = document.querySelector('.message-start');\nconst loseMessage = document.querySelector('.message-lose');\nconst winMessage = document.querySelector('.message-win');\nconst gameScore = document.querySelector('.game-score');\n\nfor (let i = 0; i < 4; i++) {\n  for (let j = 0; j < 4; j++) {\n    columns[j].push(rows[i].children[j]);\n  }\n}\n\nlet clearCells = [...cells];\nlet started = false;\nlet rotated = false;\n\nfunction randomCellFill() {\n  if (!clearCells.length) {\n    return;\n  }\n\n  const randomIndex = (someArr) => Math.floor(Math.random() * someArr.length);\n  const randomCell = clearCells[randomIndex(clearCells)];\n  const randomValue = startCellVelues[randomIndex(startCellVelues)];\n\n  randomCell.classList = (`field-cell field-cell--${randomValue}`);\n  randomCell.innerText = randomValue;\n\n  clearCells.splice(clearCells.indexOf(randomCell), 1);\n}\n\nconst start = () => {\n  startMessage.style = 'display: none;';\n  startButton.classList = 'button restart';\n  startButton.innerText = 'Restart';\n\n  randomCellFill();\n  randomCellFill();\n  started = true;\n};\n\nconst restart = () => {\n  loseMessage.classList.add('hidden');\n  winMessage.classList.add('hidden');\n  clearCells = [...cells];\n  gameScore.innerText = 0;\n\n  cells.forEach(cell => {\n    cell.innerText = '';\n    cell.className = 'field-cell';\n  });\n\n  randomCellFill();\n  randomCellFill();\n};\n\nfunction isMergePossible() {\n  const wholeField = [...cellsInRow, ...columns];\n\n  for (const line of wholeField) {\n    for (let i = 0; i < 3; i++) {\n      if (line[i].innerText === line[i + 1].innerText) {\n        return true;\n      }\n    }\n  }\n}\n\nfunction upArrow() {\n  for (const column of columns) {\n    rotateCells([...column].reverse());\n  }\n}\n\nfunction downArrow() {\n  for (const column of columns) {\n    rotateCells(column);\n  }\n}\n\nfunction rightArrow() {\n  for (const row of cellsInRow) {\n    rotateCells(row);\n  }\n}\n\nfunction leftArrow() {\n  for (const row of cellsInRow) {\n    rotateCells([...row].reverse());\n  }\n}\n\nfunction arrowMove(direction) {\n  if (!clearCells.length && !isMergePossible()) {\n    loseMessage.classList.remove('hidden');\n  }\n\n  switch (direction) {\n    case 'ArrowUp':\n      upArrow();\n      break;\n    case 'ArrowDown':\n      downArrow();\n      break;\n    case 'ArrowRight':\n      rightArrow();\n      break;\n    case 'ArrowLeft':\n      leftArrow();\n      break;\n  }\n\n  cells.forEach(cell => {\n    cell.removeAttribute('data-blocked');\n  });\n}\n\nfunction deleteElement(element) {\n  element.innerText = '';\n  element.className = 'field-cell';\n  clearCells.push(element);\n}\n\nfunction rotateElement(curr, prev) {\n  curr.innerText = prev.innerText;\n  curr.className = prev.className;\n  clearCells.splice(clearCells.indexOf(curr), 1);\n  deleteElement(prev);\n}\n\nfunction cellMerge(curr, prev) {\n  const value = curr.innerText * 2;\n\n  curr.innerText = value;\n  curr.className = `field-cell field-cell--${value}`;\n  gameScore.innerText = +gameScore.innerText + value;\n  deleteElement(prev);\n\n  curr.dataset.blocked = true;\n  prev.dataset.blocked = true;\n\n  if (value === 2048) {\n    winMessage.classList.remove('hidden');\n  }\n}\n\nfunction rotateCells(line) {\n  for (let i = 3; i > 0; i--) {\n    const moveAllowed = clearCells.includes(line[i])\n      && !clearCells.includes(line[i - 1]);\n\n    const mergeAllowed = line[i].innerText === line[i - 1].innerText\n      && line[i].innerText.length\n      && !line[i - 1].dataset.blocked;\n\n    if ((mergeAllowed || moveAllowed) && !rotated) {\n      rotated = true;\n    }\n\n    if (mergeAllowed) {\n      cellMerge(line[i], line[i - 1]);\n      rotateCells(line);\n    }\n\n    if (moveAllowed) {\n      rotateElement(line[i], line[i - 1]);\n      rotateCells(line);\n    }\n  }\n}\n\ndocument.addEventListener('keydown', (evt) => {\n  const arrowDirections = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'];\n\n  if (arrowDirections.includes(evt.key)) {\n    evt.preventDefault();\n    arrowMove(evt.key);\n\n    if (rotated) {\n      randomCellFill();\n      rotated = false;\n    }\n  }\n});\n\nstartButton.addEventListener('click', () => {\n  if (!started) {\n    start();\n  } else {\n    restart();\n  }\n});\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","columns","rows","document","querySelectorAll","cells","cellsInRow","map","row","startCellVelues","startButton","querySelector","startMessage","loseMessage","winMessage","gameScore","j","push","children","clearCells","started","rotated","randomCellFill","randomIndex","someArr","Math","floor","random","randomCell","randomValue","classList","concat","innerText","splice","indexOf","start","style","restart","add","forEach","cell","className","deleteElement","element","rotateCells","line","curr","prev","moveAllowed","includes","mergeAllowed","dataset","blocked","cellMerge","value","remove","addEventListener","evt","arrowDirections","key","preventDefault","arrowMove","direction","isMergePossible","wholeField","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","next","done","err","return","upArrow","column","reverse","downArrow","rightArrow","leftArrow","removeAttribute"],"version":3,"file":"index.217808a0.js.map"}